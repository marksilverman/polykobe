// geometry.js
//
const sqrt5 = Math.sqrt(5);
const φ = (1 + sqrt5) / 2;

const polyhedronName = "Geodesic Cube Pattern 15 [5,2]";

const C0 = 0.0255270846395505732706292290989;
const C1 = 0.0846673185640690818705254335492;
const C2 = 0.129528422577396396138738137671;
const C3 = 0.195385375988691226181765034407;
const C4 = 0.234847017920403316575127542587;
const C5 = 0.292163374139235869402615334266;
const C6 = 0.347413348532377529459104439437;
const C7 = 0.368771584412958589466230779956;
const C8 = 0.449650985103230730677113782767;
const C9 = 0.455972312504610786502610031053;
const C10 = 0.536608920015575366264791837762;
const C11 = 0.556896028926818156671056103327;
const C12 = 0.574594728890216283893694977053;
const C13 = 0.578312533367756454104416600086;
const C14 = 0.670010587063588225693320991884;
const C15 = 0.693444015027016495094991007403;
const C16 = 0.744202975309506823108367732326;
const C17 = 0.754667283256049048141861491731;
const C18 = 0.822220395730122330583504433328;
const C19 = 0.901443733891291062631123496725001;
const C20 = 0.902344951978403558494550833584;
const C21 = 0.988599008702954396471829754474;

const defaultVertexList = [
  [ C3,  C1,  C21], [ C3, -C1, -C21], [-C3, -C1,  C21], [-C3,  C1, -C21],
  [ C21,  C3,  C1], [ C21, -C3, -C1], [-C21, -C3,  C1], [-C21,  C3, -C1],
  [ C1,  C21,  C3], [ C1, -C21, -C3], [-C1, -C21,  C3], [-C1,  C21, -C3],
  [ C1, -C3,  C21], [ C1,  C3, -C21], [-C1,  C3,  C21], [-C1, -C3, -C21],
  [ C21, -C1,  C3], [ C21,  C1, -C3], [-C21,  C1,  C3], [-C21, -C1, -C3],
  [ C3, -C21,  C1], [ C3,  C21, -C1], [-C3,  C21,  C1], [-C3, -C21, -C1],
  [ C6, -C5,  C20], [ C6,  C5, -C20], [-C6,  C5,  C20], [-C6, -C5, -C20],
  [ C20, -C6,  C5], [ C20,  C6, -C5], [-C20,  C6,  C5], [-C20, -C6, -C5],
  [ C5, -C20,  C6], [ C5,  C20, -C6], [-C5,  C20,  C6], [-C5, -C20, -C6],
  [ C5,  C6,  C20], [ C5, -C6, -C20], [-C5, -C6,  C20], [-C5,  C6, -C20],
  [ C20,  C5,  C6], [ C20, -C5, -C6], [-C20, -C5,  C6], [-C20,  C5, -C6],
  [ C6,  C20,  C5], [ C6, -C20, -C5], [-C6, -C20,  C5], [-C6,  C20, -C5],
  [ C9, -C0,  C19], [ C9,  C0, -C19], [-C9,  C0,  C19], [-C9, -C0, -C19],
  [ C19, -C9,  C0], [ C19,  C9, -C0], [-C19,  C9,  C0], [-C19, -C9, -C0],
  [ C0, -C19,  C9], [ C0,  C19, -C9], [-C0,  C19,  C9], [-C0, -C19, -C9],
  [ C0,  C9,  C19], [ C0, -C9, -C19], [-C0, -C9,  C19], [-C0,  C9, -C19],
  [ C19,  C0,  C9], [ C19, -C0, -C9], [-C19, -C0,  C9], [-C19,  C0, -C9],
  [ C9,  C19,  C0], [ C9, -C19, -C0], [-C9, -C19,  C0], [-C9,  C19, -C0],
  [ C10,  C4,  C18], [ C10, -C4, -C18], [-C10, -C4,  C18], [-C10,  C4, -C18],
  [ C18,  C10,  C4], [ C18, -C10, -C4], [-C18, -C10,  C4], [-C18,  C10, -C4],
  [ C4,  C18,  C10], [ C4, -C18, -C10], [-C4, -C18,  C10], [-C4,  C18, -C10],
  [ C4, -C10,  C18], [ C4,  C10, -C18], [-C4,  C10,  C18], [-C4, -C10, -C18],
  [ C18, -C4,  C10], [ C18,  C4, -C10], [-C18,  C4,  C10], [-C18, -C4, -C10],
  [ C10, -C18,  C4], [ C10,  C18, -C4], [-C10,  C18,  C4], [-C10, -C18, -C4],
  [ C11, -C7,  C17], [ C11,  C7, -C17], [-C11,  C7,  C17], [-C11, -C7, -C17],
  [ C17, -C11,  C7], [ C17,  C11, -C7], [-C17,  C11,  C7], [-C17, -C11, -C7],
  [ C7, -C17,  C11], [ C7,  C17, -C11], [-C7,  C17,  C11], [-C7, -C17, -C11],
  [ C7,  C11,  C17], [ C7, -C11, -C17], [-C7, -C11,  C17], [-C7,  C11, -C17],
  [ C17,  C7,  C11], [ C17, -C7, -C11], [-C17, -C7,  C11], [-C17,  C7, -C11],
  [ C11,  C17,  C7], [ C11, -C17, -C7], [-C11, -C17,  C7], [-C11,  C17, -C7],
  [ C14, -C2,  C16], [ C14,  C2, -C16], [-C14,  C2,  C16], [-C14, -C2, -C16],
  [ C16, -C14,  C2], [ C16,  C14, -C2], [-C16,  C14,  C2], [-C16, -C14, -C2],
  [ C2, -C16,  C14], [ C2,  C16, -C14], [-C2,  C16,  C14], [-C2, -C16, -C14],
  [ C2,  C14,  C16], [ C2, -C14, -C16], [-C2, -C14,  C16], [-C2,  C14, -C16],
  [ C16,  C2,  C14], [ C16, -C2, -C14], [-C16, -C2,  C14], [-C16,  C2, -C14],
  [ C14,  C16,  C2], [ C14, -C16, -C2], [-C14, -C16,  C2], [-C14,  C16, -C2],
  [ C12,  C8,  C15], [ C12, -C8, -C15], [-C12, -C8,  C15], [-C12,  C8, -C15],
  [ C15,  C12,  C8], [ C15, -C12, -C8], [-C15, -C12,  C8], [-C15,  C12, -C8],
  [ C8,  C15,  C12], [ C8, -C15, -C12], [-C8, -C15,  C12], [-C8,  C15, -C12],
  [ C8, -C12,  C15], [ C8,  C12, -C15], [-C8,  C12,  C15], [-C8, -C12, -C15],
  [ C15, -C8,  C12], [ C15,  C8, -C12], [-C15,  C8,  C12], [-C15, -C8, -C12],
  [ C12, -C15,  C8], [ C12,  C15, -C8], [-C12,  C15,  C8], [-C12, -C15, -C8],
  [ C13,  C13,  C13], [ C13,  C13, -C13], [ C13, -C13,  C13], [ C13, -C13, -C13],
  [-C13,  C13,  C13], [-C13,  C13, -C13], [-C13, -C13,  C13], [-C13, -C13, -C13]
];

const faceIndexList = [
  [0, 14, 2, 12], [1, 15, 3, 13], [4, 16, 5, 17], [6, 18, 7, 19], [8, 21, 11, 22], [9, 20, 10, 23],
  [168, 144, 112, 148], [168, 148, 116, 152], [168, 152, 108, 144],
  [169, 157, 105, 165], [169, 165, 101, 161], [169, 161, 97, 157],
  [170, 156, 104, 164], [170, 164, 100, 160], [170, 160, 96, 156],
  [171, 145, 113, 149], [171, 149, 117, 153], [171, 153, 109, 145],
  [172, 158, 106, 166], [172, 166, 102, 162], [172, 162, 98, 158],
  [173, 147, 115, 151], [173, 151, 119, 155], [173, 155, 111, 147],
  [174, 146, 114, 150], [174, 150, 118, 154], [174, 154, 110, 146],
  [175, 159, 107, 167], [175, 167, 103, 163], [175, 163, 99, 159],
  [24, 12, 62, 84], [25, 13, 63, 85], [26, 14, 60, 86], [27, 15, 61, 87],
  [28, 16, 64, 88], [29, 17, 65, 89], [30, 18, 66, 90], [31, 19, 67, 91],
  [32, 20, 69, 92], [33, 21, 68, 93], [34, 22, 71, 94], [35, 23, 70, 95],
  [36, 0, 48, 72], [37, 1, 49, 73], [38, 2, 50, 74], [39, 3, 51, 75],
  [40, 4, 53, 76], [41, 5, 52, 77], [42, 6, 55, 78], [43, 7, 54, 79],
  [44, 8, 58, 80], [45, 9, 59, 81], [46, 10, 56, 82], [47, 11, 57, 83],
  [24, 48, 0, 12], [25, 49, 1, 13], [26, 50, 2, 14], [27, 51, 3, 15],
  [28, 52, 5, 16], [29, 53, 4, 17], [30, 54, 7, 18], [31, 55, 6, 19],
  [32, 56, 10, 20], [33, 57, 11, 21], [34, 58, 8, 22], [35, 59, 9, 23],
  [36, 60, 14, 0], [37, 61, 15, 1], [38, 62, 12, 2], [39, 63, 13, 3],
  [40, 64, 16, 4], [41, 65, 17, 5], [42, 66, 18, 6], [43, 67, 19, 7],
  [44, 68, 21, 8], [45, 69, 20, 9], [46, 70, 23, 10], [47, 71, 22, 11],
  [24, 84, 156, 96], [25, 85, 157, 97], [26, 86, 158, 98], [27, 87, 159, 99],
  [28, 88, 160, 100], [29, 89, 161, 101], [30, 90, 162, 102], [31, 91, 163, 103],
  [32, 92, 164, 104], [33, 93, 165, 105], [34, 94, 166, 106], [35, 95, 167, 107],
  [36, 72, 144, 108], [37, 73, 145, 109], [38, 74, 146, 110], [39, 75, 147, 111],
  [40, 76, 148, 112], [41, 77, 149, 113], [42, 78, 150, 114], [43, 79, 151, 115],
  [44, 80, 152, 116], [45, 81, 153, 117], [46, 82, 154, 118], [47, 83, 155, 119],
  [24, 96, 120, 48], [25, 97, 121, 49], [26, 98, 122, 50], [27, 99, 123, 51],
  [28, 100, 124, 52], [29, 101, 125, 53], [30, 102, 126, 54], [31, 103, 127, 55],
  [32, 104, 128, 56], [33, 105, 129, 57], [34, 106, 130, 58], [35, 107, 131, 59],
  [36, 108, 132, 60], [37, 109, 133, 61], [38, 110, 134, 62], [39, 111, 135, 63],
  [40, 112, 136, 64], [41, 113, 137, 65], [42, 114, 138, 66], [43, 115, 139, 67],
  [44, 116, 140, 68], [45, 117, 141, 69], [46, 118, 142, 70], [47, 119, 143, 71],
  [48, 120, 136, 72], [49, 121, 137, 73], [50, 122, 138, 74], [51, 123, 139, 75],
  [52, 124, 141, 77], [53, 125, 140, 76], [54, 126, 143, 79], [55, 127, 142, 78],
  [56, 128, 134, 82], [57, 129, 135, 83], [58, 130, 132, 80], [59, 131, 133, 81],
  [60, 132, 130, 86], [61, 133, 131, 87], [62, 134, 128, 84], [63, 135, 129, 85],
  [64, 136, 120, 88], [65, 137, 121, 89], [66, 138, 122, 90], [67, 139, 123, 91],
  [68, 140, 125, 93], [69, 141, 124, 92], [70, 142, 127, 95], [71, 143, 126, 94],
  [72, 136, 112, 144], [73, 137, 113, 145], [74, 138, 114, 146], [75, 139, 115, 147],
  [76, 140, 116, 148], [77, 141, 117, 149], [78, 142, 118, 150], [79, 143, 119, 151],
  [80, 132, 108, 152], [81, 133, 109, 153], [82, 134, 110, 154], [83, 135, 111, 155],
  [84, 128, 104, 156], [85, 129, 105, 157], [86, 130, 106, 158], [87, 131, 107, 159],
  [88, 120, 96, 160], [89, 121, 97, 161], [90, 122, 98, 162], [91, 123, 99, 163],
  [92, 124, 100, 164], [93, 125, 101, 165], [94, 126, 102, 166], [95, 127, 103, 167]
];

const edgeMap = new Map();
const edgeList = [ ];
const faceList = [ ];

function getEdgeKey(a, b)
{
  return a < b ? `${a},${b}` : `${b},${a}`;
}

function getEdgeIndex(a, b, faceIndex)
{
  const key = getEdgeKey(a, b);
  if (edgeMap.has(key))
  {
    const entry = edgeMap.get(key);
    entry.faces.push(faceIndex);
    return entry.index;
  }
  const index = edgeList.length;
  const entry = { vertices: [ a, b ], faces: [ faceIndex ] };
  edgeMap.set( key, { index, faces: entry.faces } );
  edgeList.push( entry );
  return index;
}

for (let i = 0; i < faceIndexList.length; i++)
{
  const [ a, b, c, d ] = faceIndexList[ i ];
  const e0 = getEdgeIndex( a, b, i );
  const e1 = getEdgeIndex( b, c, i );
  const e2 = getEdgeIndex( c, d, i );
  const e3 = getEdgeIndex( d, a, i );
  faceList.push({
    vertices: [ a, b, c, d ],
    edges: [ e0, e1, e2, e3 ],
    state: 0,
    locked: false,
    number: null
  });
}
