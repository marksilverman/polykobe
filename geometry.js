// geometry.js
//
const edgeMap = new Map();
const edgeList = [];
let faceList = [];
let undoIdx = 0;
let undoList = [];
undoList[undoIdx] = faceList;

const polyhedronName = "Geodesic Cube Pattern 10 [3,3]";

const C0 = 0.24397876464804196;
const C1 = 0.26583550240161445;
const C2 = 0.47197515493389344;
const C3 = 0.5158689553505401;
const C4 = 0.5791640555596085;
const C5 = 0.696041000452472;
const C6 = 0.7611051101207635;
const C7 = 0.876213045554404;
const C8 = 0.9454018922693007;
const C9 = 1.0189634561725115;

const defaultVertexList = [
  [ 0.0, 0.0,  C9], [ 0.0, 0.0, -C9], [ C9, 0.0, 0.0], [-C9, 0.0, 0.0],
  [ 0.0,  C9, 0.0], [ 0.0, -C9, 0.0],
  [ C1,  C1,  C8], [ C1,  C1, -C8], [ C1, -C1,  C8], [ C1, -C1, -C8],
  [-C1,  C1,  C8], [-C1,  C1, -C8], [-C1, -C1,  C8], [-C1, -C1, -C8],
  [ C8,  C1,  C1], [ C8,  C1, -C1], [ C8, -C1,  C1], [ C8, -C1, -C1],
  [-C8,  C1,  C1], [-C8,  C1, -C1], [-C8, -C1,  C1], [-C8, -C1, -C1],
  [ C1,  C8,  C1], [ C1,  C8, -C1], [ C1, -C8,  C1], [ C1, -C8, -C1],
  [-C1,  C8,  C1], [-C1,  C8, -C1], [-C1, -C8,  C1], [-C1, -C8, -C1],
  [ C3, 0.0,  C7], [ C3, 0.0, -C7], [-C3, 0.0,  C7], [-C3, 0.0, -C7],
  [ C7,  C3, 0.0], [ C7, -C3, 0.0], [-C7,  C3, 0.0], [-C7, -C3, 0.0],
  [0.0,  C7,  C3], [0.0,  C7, -C3], [0.0, -C7,  C3], [0.0, -C7, -C3],
  [0.0,  C3,  C7], [0.0,  C3, -C7], [0.0, -C3,  C7], [0.0, -C3, -C7],
  [ C7, 0.0,  C3], [ C7, 0.0, -C3], [-C7, 0.0,  C3], [-C7, 0.0, -C3],
  [ C3,  C7, 0.0], [ C3, -C7, 0.0], [-C3,  C7, 0.0], [-C3, -C7, 0.0],
  [ C2,  C2,  C6], [ C2,  C2, -C6], [ C2, -C2,  C6], [ C2, -C2, -C6],
  [-C2,  C2,  C6], [-C2,  C2, -C6], [-C2, -C2,  C6], [-C2, -C2, -C6],
  [ C6,  C2,  C2], [ C6,  C2, -C2], [ C6, -C2,  C2], [ C6, -C2, -C2],
  [-C6,  C2,  C2], [-C6,  C2, -C2], [-C6, -C2,  C2], [-C6, -C2, -C2],
  [ C2,  C6,  C2], [ C2,  C6, -C2], [ C2, -C6,  C2], [ C2, -C6, -C2],
  [-C2,  C6,  C2], [-C2,  C6, -C2], [-C2, -C6,  C2], [-C2, -C6, -C2],
  [ C5,  C0,  C5], [ C5,  C0, -C5], [ C5, -C0,  C5], [ C5, -C0, -C5],
  [-C5,  C0,  C5], [-C5,  C0, -C5], [-C5, -C0,  C5], [-C5, -C0, -C5],
  [ C5,  C5,  C0], [ C5,  C5, -C0], [ C5, -C5,  C0], [ C5, -C5, -C0],
  [-C5,  C5,  C0], [-C5,  C5, -C0], [-C5, -C5,  C0], [-C5, -C5, -C0],
  [ C0,  C5,  C5], [ C0,  C5, -C5], [ C0, -C5,  C5], [ C0, -C5, -C5],
  [-C0,  C5,  C5], [-C0,  C5, -C5], [-C0, -C5,  C5], [-C0, -C5, -C5],
  [ C4,  C4,  C4], [ C4,  C4, -C4], [ C4, -C4,  C4], [ C4, -C4, -C4],
  [-C4,  C4,  C4], [-C4,  C4, -C4], [-C4, -C4,  C4], [-C4, -C4, -C4],
];

const faceIndexList = [
  [30,80,46,78],[31,79,47,81],[32,82,48,84],[33,85,49,83],[34,87,50,86],[35,88,51,89],
  [36,90,52,91],[37,93,53,92],[38,98,42,94],[39,95,43,99],[40,96,44,100],[41,101,45,97],
  [0,6,42,10],[0,10,32,12],[0,12,44,8],[0,8,30,6],[1,7,31,9],[1,9,45,13],[1,13,33,11],[1,11,43,7],
  [2,14,46,16],[2,16,35,17],[2,17,47,15],[2,15,34,14],[3,18,36,19],[3,19,49,21],[3,21,37,20],[3,20,48,18],
  [4,22,50,23],[4,23,39,27],[4,27,52,26],[4,26,38,22],[5,24,40,28],[5,28,53,29],[5,29,41,25],[5,25,51,24],
  [102,54,78,62],[102,62,86,70],[102,70,94,54],[103,55,95,71],[103,71,87,63],[103,63,79,55],
  [104,56,96,72],[104,72,88,64],[104,64,80,56],[105,57,81,65],[105,65,89,73],[105,73,97,57],
  [106,58,98,74],[106,74,90,66],[106,66,82,58],[107,59,83,67],[107,67,91,75],[107,75,99,59],
  [108,60,84,68],[108,68,92,76],[108,76,100,60],[109,61,101,77],[109,77,93,69],[109,69,85,61],
  [6,30,78,54],[6,54,94,42],[7,43,95,55],[7,55,79,31],[8,44,96,56],[8,56,80,30],[9,31,81,57],[9,57,97,45],
  [10,42,98,58],[10,58,82,32],[11,33,83,59],[11,59,99,43],[12,32,84,60],[12,60,100,44],[13,45,101,61],[13,61,85,33],
  [14,34,86,62],[14,62,78,46],[15,47,79,63],[15,63,87,34],[16,46,80,64],[16,64,88,35],[17,35,89,65],[17,65,81,47],
  [18,48,82,66],[18,66,90,36],[19,36,91,67],[19,67,83,49],[20,37,92,68],[20,68,84,48],[21,49,85,69],[21,69,93,37],
  [22,38,94,70],[22,70,86,50],[23,50,87,71],[23,71,95,39],[24,51,88,72],[24,72,96,40],[25,41,97,73],[25,73,89,51],
  [26,52,90,74],[26,74,98,38],[27,39,99,75],[27,75,91,52],[28,40,100,76],[28,76,92,53],[29,53,93,77],[29,77,101,41],
];

function getEdgeKey(a, b) {
  return a < b ? `${a},${b}` : `${b},${a}`;
}

function getEdgeIndex(a, b, faceIndex) {
  const key = getEdgeKey(a, b);
  if (edgeMap.has(key)) {
    const entry = edgeMap.get(key);
    entry.faces.push(faceIndex);
    return entry.index;
  }
  const index = edgeList.length;
  const entry = { vertices: [a, b], faces: [faceIndex] };
  edgeMap.set(key, { index, faces: entry.faces });
  edgeList.push(entry);
  return index;
}

for (let i = 0; i < faceIndexList.length; i++) {
  const [a, b, c, d] = faceIndexList[i];
  const e0 = getEdgeIndex(a, b, i);
  const e1 = getEdgeIndex(b, c, i);
  const e2 = getEdgeIndex(c, d, i);
  const e3 = getEdgeIndex(d, a, i);
  faceList.push({
    vertices: [a, b, c, d],
    edges: [e0, e1, e2, e3],
    state: 0,
    locked: false,
    number: null
  });
}
